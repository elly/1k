#!/usr/bin/env python
# merkle(1) - merkle tree hashing
# Using sha256, with 4096-byte data blocks (and hence a branching factor of 64,
# which leads to really shallow trees).
# Major flaws: not parallel, reads entire file into RAM before hashing. Ugh. We
# really shouldn't take input on stdin.

import hashlib
import sys

BLOCKSIZE = 4096

def hexhash(val):
    return hashlib.sha256(val).hexdigest()

def treehash(val, depth):
    if len(val) < BLOCKSIZE:
        # Leaf node.
        return hexhash(val)
    else:
	# We can fit this many hex hashes in a single block. Split our value
	# into pieces. Round so that the last block is the short one, if need
	# be.
        plen = len(val) / len(hexhash(''))
        if len(val) % BLOCKSIZE != 0:
            plen += 1
        hashes = ''
        while val:
            (block, val) = (val[:plen], val[plen:])
            hashes += treehash(block, depth + 1)
        return hexhash(hashes)

print 'sha256:' + treehash(sys.stdin.read(), 0)
